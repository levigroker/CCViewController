<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CCSprite.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CCSprite</TokenIdentifier>
			<Abstract>CCSprite is a 2d image ( http://en.wikipedia.org/wiki/Sprite )</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>
			
			<NodeRef refid="158"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/setDirty:</TokenIdentifier>
			<Abstract>whether or not the Sprite needs to be updated in the Atlas</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) BOOL dirty</Declaration>
			
			
			<Anchor>//api/name/dirty</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCSprite/dirty</TokenIdentifier>
			<Abstract>whether or not the Sprite needs to be updated in the Atlas</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) BOOL dirty</Declaration>
			
			
			<Anchor>//api/name/dirty</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/setQuad:</TokenIdentifier>
			<Abstract>the quad (tex coords, vertex coords and color information</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) ccV3F_C4B_T2F_Quad quad</Declaration>
			
			
			<Anchor>//api/name/quad</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCSprite/quad</TokenIdentifier>
			<Abstract>the quad (tex coords, vertex coords and color information</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) ccV3F_C4B_T2F_Quad quad</Declaration>
			
			
			<Anchor>//api/name/quad</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/setAtlasIndex:</TokenIdentifier>
			<Abstract>The index used on the TextureAtlas. Don't modify this value unless you know what you are doing</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) NSUInteger atlasIndex</Declaration>
			
			
			<Anchor>//api/name/atlasIndex</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCSprite/atlasIndex</TokenIdentifier>
			<Abstract>The index used on the TextureAtlas. Don't modify this value unless you know what you are doing</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) NSUInteger atlasIndex</Declaration>
			
			
			<Anchor>//api/name/atlasIndex</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/setTextureRect:</TokenIdentifier>
			<Abstract>returns the texture rect of the CCSprite in points</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) CGRect textureRect</Declaration>
			
			
			<Anchor>//api/name/textureRect</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCSprite/textureRect</TokenIdentifier>
			<Abstract>returns the texture rect of the CCSprite in points</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) CGRect textureRect</Declaration>
			
			
			<Anchor>//api/name/textureRect</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/setTextureRectRotated:</TokenIdentifier>
			<Abstract>returns whether or not the texture rectangle is rotated</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) BOOL textureRectRotated</Declaration>
			
			
			<Anchor>//api/name/textureRectRotated</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCSprite/textureRectRotated</TokenIdentifier>
			<Abstract>returns whether or not the texture rectangle is rotated</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) BOOL textureRectRotated</Declaration>
			
			
			<Anchor>//api/name/textureRectRotated</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/setFlipX:</TokenIdentifier>
			<Abstract>whether or not the sprite is flipped horizontally.
It only flips the texture of the sprite, and not the texture of the sprite's children.
Also, flipping the texture doesn't alter the anchorPoint.
If you want to flip the anchorPoint too, and/or to flip the children too use:</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) BOOL flipX</Declaration>
			
			
			<Anchor>//api/name/flipX</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCSprite/flipX</TokenIdentifier>
			<Abstract>whether or not the sprite is flipped horizontally.
It only flips the texture of the sprite, and not the texture of the sprite's children.
Also, flipping the texture doesn't alter the anchorPoint.
If you want to flip the anchorPoint too, and/or to flip the children too use:</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) BOOL flipX</Declaration>
			
			
			<Anchor>//api/name/flipX</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/setFlipY:</TokenIdentifier>
			<Abstract>whether or not the sprite is flipped vertically.
It only flips the texture of the sprite, and not the texture of the sprite's children.
Also, flipping the texture doesn't alter the anchorPoint.
If you want to flip the anchorPoint too, and/or to flip the children too use:</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) BOOL flipY</Declaration>
			
			
			<Anchor>//api/name/flipY</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCSprite/flipY</TokenIdentifier>
			<Abstract>whether or not the sprite is flipped vertically.
It only flips the texture of the sprite, and not the texture of the sprite's children.
Also, flipping the texture doesn't alter the anchorPoint.
If you want to flip the anchorPoint too, and/or to flip the children too use:</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) BOOL flipY</Declaration>
			
			
			<Anchor>//api/name/flipY</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/setOpacity:</TokenIdentifier>
			<Abstract>opacity: conforms to CCRGBAProtocol protocol</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) GLubyte opacity</Declaration>
			
			
			<Anchor>//api/name/opacity</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCSprite/opacity</TokenIdentifier>
			<Abstract>opacity: conforms to CCRGBAProtocol protocol</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) GLubyte opacity</Declaration>
			
			
			<Anchor>//api/name/opacity</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/setColor:</TokenIdentifier>
			<Abstract>RGB colors: conforms to CCRGBAProtocol protocol</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) ccColor3B color</Declaration>
			
			
			<Anchor>//api/name/color</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCSprite/color</TokenIdentifier>
			<Abstract>RGB colors: conforms to CCRGBAProtocol protocol</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) ccColor3B color</Declaration>
			
			
			<Anchor>//api/name/color</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/setTextureAtlas:</TokenIdentifier>
			<Abstract>weak reference of the CCTextureAtlas used when the sprite is rendered using a CCSpriteBatchNode</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) CCTextureAtlas *textureAtlas</Declaration>
			
			
			<Anchor>//api/name/textureAtlas</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCSprite/textureAtlas</TokenIdentifier>
			<Abstract>weak reference of the CCTextureAtlas used when the sprite is rendered using a CCSpriteBatchNode</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) CCTextureAtlas *textureAtlas</Declaration>
			
			
			<Anchor>//api/name/textureAtlas</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/setBatchNode:</TokenIdentifier>
			<Abstract>weak reference to the CCSpriteBatchNode that renders the CCSprite</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) CCSpriteBatchNode *batchNode</Declaration>
			
			
			<Anchor>//api/name/batchNode</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCSprite/batchNode</TokenIdentifier>
			<Abstract>weak reference to the CCSpriteBatchNode that renders the CCSprite</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) CCSpriteBatchNode *batchNode</Declaration>
			
			
			<Anchor>//api/name/batchNode</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/setOffsetPosition:</TokenIdentifier>
			<Abstract>offset position in points of the sprite in points. Calculated automatically by editors like Zwoptex.</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) CGPoint offsetPosition</Declaration>
			
			
			<Anchor>//api/name/offsetPosition</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCSprite/offsetPosition</TokenIdentifier>
			<Abstract>offset position in points of the sprite in points. Calculated automatically by editors like Zwoptex.</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) CGPoint offsetPosition</Declaration>
			
			
			<Anchor>//api/name/offsetPosition</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/setBlendFunc:</TokenIdentifier>
			<Abstract>conforms to CCTextureProtocol protocol</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) ccBlendFunc blendFunc</Declaration>
			
			
			<Anchor>//api/name/blendFunc</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCSprite/blendFunc</TokenIdentifier>
			<Abstract>conforms to CCTextureProtocol protocol</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) ccBlendFunc blendFunc</Declaration>
			
			
			<Anchor>//api/name/blendFunc</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCSprite/spriteWithTexture:</TokenIdentifier>
			<Abstract>Creates an sprite with a texture.
The rect used will be the size of the texture.
The offset will be (0,0).</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>+ (id)spriteWithTexture:(CCTexture2D *)texture</Declaration>
			
			
			<Anchor>//api/name/spriteWithTexture:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCSprite/spriteWithTexture:rect:</TokenIdentifier>
			<Abstract>Creates an sprite with a texture and a rect.
The offset will be (0,0).</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>+ (id)spriteWithTexture:(CCTexture2D *)texture rect:(CGRect)rect</Declaration>
			
			
			<Anchor>//api/name/spriteWithTexture:rect:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCSprite/spriteWithSpriteFrame:</TokenIdentifier>
			<Abstract>Creates an sprite with an sprite frame.</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>+ (id)spriteWithSpriteFrame:(CCSpriteFrame *)spriteFrame</Declaration>
			
			
			<Anchor>//api/name/spriteWithSpriteFrame:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCSprite/spriteWithSpriteFrameName:</TokenIdentifier>
			<Abstract>Creates an sprite with an sprite frame name.
An CCSpriteFrame will be fetched from the CCSpriteFrameCache by name.
If the CCSpriteFrame doesn't exist it will raise an exception.</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>+ (id)spriteWithSpriteFrameName:(NSString *)spriteFrameName</Declaration>
			
			
			<Anchor>//api/name/spriteWithSpriteFrameName:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCSprite/spriteWithFile:</TokenIdentifier>
			<Abstract>Creates an sprite with an image filename.
The rect used will be the size of the image.
The offset will be (0,0).</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>+ (id)spriteWithFile:(NSString *)filename</Declaration>
			
			
			<Anchor>//api/name/spriteWithFile:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCSprite/spriteWithFile:rect:</TokenIdentifier>
			<Abstract>Creates an sprite with an image filename and a rect.
The offset will be (0,0).</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>+ (id)spriteWithFile:(NSString *)filename rect:(CGRect)rect</Declaration>
			
			
			<Anchor>//api/name/spriteWithFile:rect:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCSprite/spriteWithCGImage:key:</TokenIdentifier>
			<Abstract>Creates an sprite with a CGImageRef and a key.
The key is used by the CCTextureCache to know if a texture was already created with this CGImage.
For example, a valid key is: @"spriteframe01".
If key is nil, then a new texture will be created each time by the CCTextureCache.</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>+ (id)spriteWithCGImage:(CGImageRef)image key:(NSString *)key</Declaration>
			
			
			<Anchor>//api/name/spriteWithCGImage:key:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/initWithTexture:</TokenIdentifier>
			<Abstract>Initializes an sprite with a texture.
The rect used will be the size of the texture.
The offset will be (0,0).</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>- (id)initWithTexture:(CCTexture2D *)texture</Declaration>
			
			
			<Anchor>//api/name/initWithTexture:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/initWithTexture:rect:</TokenIdentifier>
			<Abstract>Initializes an sprite with a texture and a rect in points (unrotated)
The offset will be (0,0).</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>- (id)initWithTexture:(CCTexture2D *)texture rect:(CGRect)rect</Declaration>
			
			
			<Anchor>//api/name/initWithTexture:rect:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/initWithTexture:rect:rotated:</TokenIdentifier>
			<Abstract>Initializes an sprite with a texture and a rect in points, optionally rotated.
The offset will be (0,0).
IMPORTANT: This is the designated initializer.</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>- (id)initWithTexture:(CCTexture2D *)texture rect:(CGRect)rect rotated:(BOOL)rotated</Declaration>
			
			
			<Anchor>//api/name/initWithTexture:rect:rotated:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/initWithSpriteFrame:</TokenIdentifier>
			<Abstract>Initializes an sprite with an sprite frame.</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>- (id)initWithSpriteFrame:(CCSpriteFrame *)spriteFrame</Declaration>
			
			
			<Anchor>//api/name/initWithSpriteFrame:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/initWithSpriteFrameName:</TokenIdentifier>
			<Abstract>Initializes an sprite with an sprite frame name.
An CCSpriteFrame will be fetched from the CCSpriteFrameCache by name.
If the CCSpriteFrame doesn't exist it will raise an exception.</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>- (id)initWithSpriteFrameName:(NSString *)spriteFrameName</Declaration>
			
			
			<Anchor>//api/name/initWithSpriteFrameName:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/initWithFile:</TokenIdentifier>
			<Abstract>Initializes an sprite with an image filename.
The rect used will be the size of the image.
The offset will be (0,0).</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>- (id)initWithFile:(NSString *)filename</Declaration>
			
			
			<Anchor>//api/name/initWithFile:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/initWithFile:rect:</TokenIdentifier>
			<Abstract>Initializes an sprite with an image filename, and a rect.
The offset will be (0,0).</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>- (id)initWithFile:(NSString *)filename rect:(CGRect)rect</Declaration>
			
			
			<Anchor>//api/name/initWithFile:rect:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/initWithCGImage:key:</TokenIdentifier>
			<Abstract>Initializes an sprite with a CGImageRef and a key
The key is used by the CCTextureCache to know if a texture was already created with this CGImage.
For example, a valid key is: @"spriteframe01".
If key is nil, then a new texture will be created each time by the CCTextureCache.</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>- (id)initWithCGImage:(CGImageRef)image key:(NSString *)key</Declaration>
			
			
			<Anchor>//api/name/initWithCGImage:key:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/updateTransform</TokenIdentifier>
			<Abstract>updates the quad according the the rotation, position, scale values.</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>- (void)updateTransform</Declaration>
			
			
			<Anchor>//api/name/updateTransform</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/setTextureRect:</TokenIdentifier>
			<Abstract>set the texture rect of the CCSprite in points.
It will call setTextureRect:rotated:untrimmedSize with rotated = NO, and utrimmedSize = rect.size.</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>- (void)setTextureRect:(CGRect)rect</Declaration>
			
			
			<Anchor>//api/name/setTextureRect:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/setTextureRect:rotated:untrimmedSize:</TokenIdentifier>
			<Abstract>set the texture rect, rectRotated and untrimmed size of the CCSprite in points.
It will update the texture coordinates and the vertex rectangle.</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>- (void)setTextureRect:(CGRect)rect rotated:(BOOL)rotated untrimmedSize:(CGSize)size</Declaration>
			
			
			<Anchor>//api/name/setTextureRect:rotated:untrimmedSize:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/setVertexRect:</TokenIdentifier>
			<Abstract>set the vertex rect.
It will be called internally by setTextureRect. Useful if you want to create 2x images from SD images in Retina Display.
Do not call it manually. Use setTextureRect instead.</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>- (void)setVertexRect:(CGRect)rect</Declaration>
			
			
			<Anchor>//api/name/setVertexRect:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/setDisplayFrame:</TokenIdentifier>
			<Abstract>sets a new display frame to the CCSprite.</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>- (void)setDisplayFrame:(CCSpriteFrame *)newFrame</Declaration>
			
			
			<Anchor>//api/name/setDisplayFrame:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/isFrameDisplayed:</TokenIdentifier>
			<Abstract>returns whether or not a CCSpriteFrame is being displayed</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isFrameDisplayed:(CCSpriteFrame *)frame</Declaration>
			
			
			<Anchor>//api/name/isFrameDisplayed:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/displayFrame</TokenIdentifier>
			<Abstract>returns the current displayed frame.</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>- (CCSpriteFrame *)displayFrame</Declaration>
			
			
			<Anchor>//api/name/displayFrame</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/setDisplayFrameWithAnimationName:index:</TokenIdentifier>
			<Abstract>changes the display frame with animation name and index.
The animation name will be get from the CCAnimationCache</Abstract>
			<DeclaredIn>CCSprite.h</DeclaredIn>			
			
			<Declaration>- (void)setDisplayFrameWithAnimationName:(NSString *)animationName index:(int)frameIndex</Declaration>
			
			
			<Anchor>//api/name/setDisplayFrameWithAnimationName:index:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCSprite/spriteWithBatchNode:rect:</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>ccDeprecated.h</DeclaredIn>			
			
			<Declaration>+ (id)spriteWithBatchNode:(CCSpriteBatchNode *)node rect:(CGRect)rect</Declaration>
			
			
			<Anchor>//api/name/spriteWithBatchNode:rect:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/initWithBatchNode:rect:</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>ccDeprecated.h</DeclaredIn>			
			
			<Declaration>- (id)initWithBatchNode:(CCSpriteBatchNode *)node rect:(CGRect)rect</Declaration>
			
			
			<Anchor>//api/name/initWithBatchNode:rect:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCSprite/displayedFrame</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>ccDeprecated.h</DeclaredIn>			
			
			<Declaration>- (CCSpriteFrame *)displayedFrame</Declaration>
			
			
			<Anchor>//api/name/displayedFrame</Anchor>
		</Token>
		
	</File>
</Tokens>