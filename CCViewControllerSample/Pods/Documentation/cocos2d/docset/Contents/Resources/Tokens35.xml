<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CCDirector.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CCDirector</TokenIdentifier>
			<Abstract>Class that creates and handle the main Window and manages how
and when to execute the Scenes.</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>
			
			<NodeRef refid="35"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setRunningThread:</TokenIdentifier>
			<Abstract>returns the cocos2d thread.
If you want to run any cocos2d task, run it in this thread.
On iOS usually it is the main thread.</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) NSThread *runningThread</Declaration>
			
			
			<Anchor>//api/name/runningThread</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCDirector/runningThread</TokenIdentifier>
			<Abstract>returns the cocos2d thread.
If you want to run any cocos2d task, run it in this thread.
On iOS usually it is the main thread.</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) NSThread *runningThread</Declaration>
			
			
			<Anchor>//api/name/runningThread</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setRunningScene:</TokenIdentifier>
			<Abstract>The current running Scene. Director can only run one Scene at the time</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) CCScene *runningScene</Declaration>
			
			
			<Anchor>//api/name/runningScene</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCDirector/runningScene</TokenIdentifier>
			<Abstract>The current running Scene. Director can only run one Scene at the time</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) CCScene *runningScene</Declaration>
			
			
			<Anchor>//api/name/runningScene</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setAnimationInterval:</TokenIdentifier>
			<Abstract>The FPS value</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) NSTimeInterval animationInterval</Declaration>
			
			
			<Anchor>//api/name/animationInterval</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCDirector/animationInterval</TokenIdentifier>
			<Abstract>The FPS value</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) NSTimeInterval animationInterval</Declaration>
			
			
			<Anchor>//api/name/animationInterval</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setDisplayStats:</TokenIdentifier>
			<Abstract>Whether or not to display director statistics</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) BOOL displayStats</Declaration>
			
			
			<Anchor>//api/name/displayStats</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCDirector/displayStats</TokenIdentifier>
			<Abstract>Whether or not to display director statistics</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) BOOL displayStats</Declaration>
			
			
			<Anchor>//api/name/displayStats</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setNextDeltaTimeZero:</TokenIdentifier>
			<Abstract>whether or not the next delta time will be zero</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) BOOL nextDeltaTimeZero</Declaration>
			
			
			<Anchor>//api/name/nextDeltaTimeZero</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCDirector/nextDeltaTimeZero</TokenIdentifier>
			<Abstract>whether or not the next delta time will be zero</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) BOOL nextDeltaTimeZero</Declaration>
			
			
			<Anchor>//api/name/nextDeltaTimeZero</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setIsPaused:</TokenIdentifier>
			<Abstract>Whether or not the Director is paused</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) BOOL isPaused</Declaration>
			
			
			<Anchor>//api/name/isPaused</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCDirector/isPaused</TokenIdentifier>
			<Abstract>Whether or not the Director is paused</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) BOOL isPaused</Declaration>
			
			
			<Anchor>//api/name/isPaused</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setIsAnimating:</TokenIdentifier>
			<Abstract>Whether or not the Director is active (animating)</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) BOOL isAnimating</Declaration>
			
			
			<Anchor>//api/name/isAnimating</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCDirector/isAnimating</TokenIdentifier>
			<Abstract>Whether or not the Director is active (animating)</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) BOOL isAnimating</Declaration>
			
			
			<Anchor>//api/name/isAnimating</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setProjection:</TokenIdentifier>
			<Abstract>Sets an OpenGL projection</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) ccDirectorProjection projection</Declaration>
			
			
			<Anchor>//api/name/projection</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCDirector/projection</TokenIdentifier>
			<Abstract>Sets an OpenGL projection</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) ccDirectorProjection projection</Declaration>
			
			
			<Anchor>//api/name/projection</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setTotalFrames:</TokenIdentifier>
			<Abstract>How many frames were called since the director started</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSUInteger totalFrames</Declaration>
			
			
			<Anchor>//api/name/totalFrames</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCDirector/totalFrames</TokenIdentifier>
			<Abstract>How many frames were called since the director started</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSUInteger totalFrames</Declaration>
			
			
			<Anchor>//api/name/totalFrames</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setSecondsPerFrame:</TokenIdentifier>
			<Abstract>seconds per frame</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) ccTime secondsPerFrame</Declaration>
			
			
			<Anchor>//api/name/secondsPerFrame</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCDirector/secondsPerFrame</TokenIdentifier>
			<Abstract>seconds per frame</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) ccTime secondsPerFrame</Declaration>
			
			
			<Anchor>//api/name/secondsPerFrame</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setSendCleanupToScene:</TokenIdentifier>
			<Abstract>Whether or not the replaced scene will receive the cleanup message.
If the new scene is pushed, then the old scene won't receive the "cleanup" message.
If the new scene replaces the old one, the it will receive the "cleanup" message.</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) BOOL sendCleanupToScene</Declaration>
			
			
			<Anchor>//api/name/sendCleanupToScene</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCDirector/sendCleanupToScene</TokenIdentifier>
			<Abstract>Whether or not the replaced scene will receive the cleanup message.
If the new scene is pushed, then the old scene won't receive the "cleanup" message.
If the new scene replaces the old one, the it will receive the "cleanup" message.</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) BOOL sendCleanupToScene</Declaration>
			
			
			<Anchor>//api/name/sendCleanupToScene</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setNotificationNode:</TokenIdentifier>
			<Abstract>This object will be visited after the main scene is visited.
This object MUST implement the "visit" selector.
Useful to hook a notification object, like CCNotifications (http://github.com/manucorporat/CCNotifications)</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) id notificationNode</Declaration>
			
			
			<Anchor>//api/name/notificationNode</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCDirector/notificationNode</TokenIdentifier>
			<Abstract>This object will be visited after the main scene is visited.
This object MUST implement the "visit" selector.
Useful to hook a notification object, like CCNotifications (http://github.com/manucorporat/CCNotifications)</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) id notificationNode</Declaration>
			
			
			<Anchor>//api/name/notificationNode</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setDelegate:</TokenIdentifier>
			<Abstract>CCDirector delegate. It shall implemente the CCDirectorDelegate protocol</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) id&lt;CCDirectorDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCDirector/delegate</TokenIdentifier>
			<Abstract>CCDirector delegate. It shall implemente the CCDirectorDelegate protocol</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) id&lt;CCDirectorDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setScheduler:</TokenIdentifier>
			<Abstract>CCScheduler associated with this director</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) CCScheduler *scheduler</Declaration>
			
			
			<Anchor>//api/name/scheduler</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCDirector/scheduler</TokenIdentifier>
			<Abstract>CCScheduler associated with this director</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) CCScheduler *scheduler</Declaration>
			
			
			<Anchor>//api/name/scheduler</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setActionManager:</TokenIdentifier>
			<Abstract>CCActionManager associated with this director</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) CCActionManager *actionManager</Declaration>
			
			
			<Anchor>//api/name/actionManager</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCDirector/actionManager</TokenIdentifier>
			<Abstract>CCActionManager associated with this director</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) CCActionManager *actionManager</Declaration>
			
			
			<Anchor>//api/name/actionManager</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCDirector/sharedDirector</TokenIdentifier>
			<Abstract>returns a shared instance of the director</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>+ (CCDirector *)sharedDirector</Declaration>
			
			
			<Anchor>//api/name/sharedDirector</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/winSize</TokenIdentifier>
			<Abstract>returns the size of the OpenGL view in points</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (CGSize)winSize</Declaration>
			
			
			<Anchor>//api/name/winSize</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/winSizeInPixels</TokenIdentifier>
			<Abstract>returns the size of the OpenGL view in pixels.
On Mac winSize and winSizeInPixels return the same value.</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (CGSize)winSizeInPixels</Declaration>
			
			
			<Anchor>//api/name/winSizeInPixels</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/reshapeProjection:</TokenIdentifier>
			<Abstract>changes the projection size</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (void)reshapeProjection:(CGSize)newWindowSize</Declaration>
			
			
			<Anchor>//api/name/reshapeProjection:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/convertToGL:</TokenIdentifier>
			<Abstract>converts a UIKit coordinate to an OpenGL coordinate
Useful to convert (multi) touchs coordinates to the current layout (portrait or landscape)</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (CGPoint)convertToGL:(CGPoint)p</Declaration>
			
			
			<Anchor>//api/name/convertToGL:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/convertToUI:</TokenIdentifier>
			<Abstract>converts an OpenGL coordinate to a UIKit coordinate
Useful to convert node points to window points for calls such as glScissor</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (CGPoint)convertToUI:(CGPoint)p</Declaration>
			
			
			<Anchor>//api/name/convertToUI:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/getZEye</TokenIdentifier>
			<Abstract>XXX: missing description</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (float)getZEye</Declaration>
			
			
			<Anchor>//api/name/getZEye</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/runWithScene:</TokenIdentifier>
			<Abstract>Enters the Director's main loop with the given Scene.
Call it to run only your FIRST scene.
Don't call it if there is already a running scene.</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (void)runWithScene:(CCScene *)scene</Declaration>
			
			
			<Anchor>//api/name/runWithScene:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/pushScene:</TokenIdentifier>
			<Abstract>Suspends the execution of the running scene, pushing it on the stack of suspended scenes.
The new scene will be executed.
Try to avoid big stacks of pushed scenes to reduce memory allocation.
ONLY call it if there is a running scene.</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (void)pushScene:(CCScene *)scene</Declaration>
			
			
			<Anchor>//api/name/pushScene:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/popScene</TokenIdentifier>
			<Abstract>Pops out a scene from the queue.
This scene will replace the running one.
The running scene will be deleted. If there are no more scenes in the stack the execution is terminated.
ONLY call it if there is a running scene.</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (void)popScene</Declaration>
			
			
			<Anchor>//api/name/popScene</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/popToRootScene</TokenIdentifier>
			<Abstract>Pops out all scenes from the queue until the root scene in the queue.
This scene will replace the running one.
The running scene will be deleted. If there are no more scenes in the stack the execution is terminated.
ONLY call it if there is a running scene.</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (void)popToRootScene</Declaration>
			
			
			<Anchor>//api/name/popToRootScene</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/replaceScene:</TokenIdentifier>
			<Abstract>Replaces the running scene with a new one. The running scene is terminated.
ONLY call it if there is a running scene.</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (void)replaceScene:(CCScene *)scene</Declaration>
			
			
			<Anchor>//api/name/replaceScene:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/end</TokenIdentifier>
			<Abstract>Ends the execution, releases the running scene.
It doesn't remove the OpenGL view from its parent. You have to do it manually.</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (void)end</Declaration>
			
			
			<Anchor>//api/name/end</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/pause</TokenIdentifier>
			<Abstract>Pauses the running scene.
The running scene will be drawed but all scheduled timers will be paused
While paused, the draw rate will be 4 FPS to reduce CPU consuption</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (void)pause</Declaration>
			
			
			<Anchor>//api/name/pause</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/resume</TokenIdentifier>
			<Abstract>Resumes the paused scene
The scheduled timers will be activated again.
The "delta time" will be 0 (as if the game wasn't paused)</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (void)resume</Declaration>
			
			
			<Anchor>//api/name/resume</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/stopAnimation</TokenIdentifier>
			<Abstract>Stops the animation. Nothing will be drawn. The main loop won't be triggered anymore.
If you wan't to pause your animation call [pause] instead.</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (void)stopAnimation</Declaration>
			
			
			<Anchor>//api/name/stopAnimation</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/startAnimation</TokenIdentifier>
			<Abstract>The main loop is triggered again.
Call this function only if [stopAnimation] was called earlier</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (void)startAnimation</Declaration>
			
			
			<Anchor>//api/name/startAnimation</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/drawScene</TokenIdentifier>
			<Abstract>Draw the scene.
This method is called every frame. Don't call it manually.</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (void)drawScene</Declaration>
			
			
			<Anchor>//api/name/drawScene</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setView:</TokenIdentifier>
			<Abstract>sets the openGL view</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (void)setView:(CCGLView *)view</Declaration>
			
			
			<Anchor>//api/name/setView:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/view</TokenIdentifier>
			<Abstract>returns the OpenGL view</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (CCGLView *)view</Declaration>
			
			
			<Anchor>//api/name/view</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/purgeCachedData</TokenIdentifier>
			<Abstract>Removes all the cocos2d data that was cached automatically.
It will purge the CCTextureCache, CCLabelBMFont cache.
IMPORTANT: The CCSpriteFrameCache won't be purged. If you want to purge it, you have to purge it manually.</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (void)purgeCachedData</Declaration>
			
			
			<Anchor>//api/name/purgeCachedData</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setGLDefaultValues</TokenIdentifier>
			<Abstract>sets the OpenGL default values</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (void)setGLDefaultValues</Declaration>
			
			
			<Anchor>//api/name/setGLDefaultValues</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setAlphaBlending:</TokenIdentifier>
			<Abstract>enables/disables OpenGL alpha blending</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (void)setAlphaBlending:(BOOL)on</Declaration>
			
			
			<Anchor>//api/name/setAlphaBlending:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setDepthTest:</TokenIdentifier>
			<Abstract>enables/disables OpenGL depth test</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (void)setDepthTest:(BOOL)on</Declaration>
			
			
			<Anchor>//api/name/setDepthTest:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/createStatsLabel</TokenIdentifier>
			<Abstract>creates the Stats labels</Abstract>
			<DeclaredIn>CCDirector.h</DeclaredIn>			
			
			<Declaration>- (void)createStatsLabel</Declaration>
			
			
			<Anchor>//api/name/createStatsLabel</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setEventDispatcher:</TokenIdentifier>
			<Abstract>sets the CCEventDispatcher (Mac only)</Abstract>
			<DeclaredIn>CCDirectorMac.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) CCEventDispatcher *eventDispatcher</Declaration>
			
			
			<Anchor>//api/name/eventDispatcher</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCDirector/eventDispatcher</TokenIdentifier>
			<Abstract>sets the CCEventDispatcher (Mac only)</Abstract>
			<DeclaredIn>CCDirectorMac.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) CCEventDispatcher *eventDispatcher</Declaration>
			
			
			<Anchor>//api/name/eventDispatcher</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/convertEventToGL:</TokenIdentifier>
			<Abstract>converts an NSEvent to GL coordinates (Mac only)</Abstract>
			<DeclaredIn>CCDirectorMac.h</DeclaredIn>			
			
			<Declaration>- (CGPoint)convertEventToGL:(NSEvent *)event</Declaration>
			
			
			<Anchor>//api/name/convertEventToGL:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setOpenGLView:</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>ccDeprecated.h</DeclaredIn>			
			
			<Declaration>- (void)setOpenGLView:(CCGLView *)view</Declaration>
			
			
			<Anchor>//api/name/setOpenGLView:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/openGLView</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>ccDeprecated.h</DeclaredIn>			
			
			<Declaration>- (CCGLView *)openGLView</Declaration>
			
			
			<Anchor>//api/name/openGLView</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setDisplayFPS:</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>ccDeprecated.h</DeclaredIn>			
			
			<Declaration>- (void)setDisplayFPS:(BOOL)display</Declaration>
			
			
			<Anchor>//api/name/setDisplayFPS:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setTouchDispatcher:</TokenIdentifier>
			<Abstract>sets the CCTouchDispatcher (iOS only)</Abstract>
			<DeclaredIn>CCDirectorIOS.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) CCTouchDispatcher *touchDispatcher</Declaration>
			
			
			<Anchor>//api/name/touchDispatcher</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCDirector/touchDispatcher</TokenIdentifier>
			<Abstract>sets the CCTouchDispatcher (iOS only)</Abstract>
			<DeclaredIn>CCDirectorIOS.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) CCTouchDispatcher *touchDispatcher</Declaration>
			
			
			<Anchor>//api/name/touchDispatcher</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/setContentScaleFactor:</TokenIdentifier>
			<Abstract>The size in pixels of the surface. It could be different than the screen size.
High-res devices might have a higher surface size than the screen size.
In non High-res device the contentScale will be emulated.</Abstract>
			<DeclaredIn>CCDirectorIOS.h</DeclaredIn>			
			
			<Declaration>- (void)setContentScaleFactor:(CGFloat)scaleFactor</Declaration>
			
			
			<Anchor>//api/name/setContentScaleFactor:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/enableRetinaDisplay:</TokenIdentifier>
			<Abstract>Will enable Retina Display on devices that supports it.
It will enable Retina Display on iPhone4 and iPod Touch 4.
It will return YES, if it could enabled it, otherwise it will return NO.</Abstract>
			<DeclaredIn>CCDirectorIOS.h</DeclaredIn>			
			
			<Declaration>- (BOOL)enableRetinaDisplay:(BOOL)enableRetina</Declaration>
			
			
			<Anchor>//api/name/enableRetinaDisplay:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCDirector/contentScaleFactor</TokenIdentifier>
			<Abstract>returns the content scale factor</Abstract>
			<DeclaredIn>CCDirectorIOS.h</DeclaredIn>			
			
			<Declaration>- (CGFloat)contentScaleFactor</Declaration>
			
			
			<Anchor>//api/name/contentScaleFactor</Anchor>
		</Token>
		
	</File>
</Tokens>