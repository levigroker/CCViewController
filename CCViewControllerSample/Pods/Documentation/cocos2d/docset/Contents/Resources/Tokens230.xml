<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CDAudioManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CDAudioManager</TokenIdentifier>
			<Abstract>CDAudioManager manages audio requirements for a game.  It provides access to a CDSoundEngine object
for playing sound effects.  It provides access to two CDLongAudioSource object (left and right channel)
for playing long duration audio such as background music and narration tracks.  Additionally it manages
the audio session to take care of things like audio session interruption and interacting with the audio
of other apps that are running on the device.</Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>
			
			<NodeRef refid="230"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/setSoundEngine:</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>@property (readonly) CDSoundEngine *soundEngine</Declaration>
			
			
			<Anchor>//api/name/soundEngine</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CDAudioManager/soundEngine</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>@property (readonly) CDSoundEngine *soundEngine</Declaration>
			
			
			<Anchor>//api/name/soundEngine</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/setBackgroundMusic:</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>@property (readonly) CDLongAudioSource *backgroundMusic</Declaration>
			
			
			<Anchor>//api/name/backgroundMusic</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CDAudioManager/backgroundMusic</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>@property (readonly) CDLongAudioSource *backgroundMusic</Declaration>
			
			
			<Anchor>//api/name/backgroundMusic</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/setWillPlayBackgroundMusic:</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>@property (readonly) BOOL willPlayBackgroundMusic</Declaration>
			
			
			<Anchor>//api/name/willPlayBackgroundMusic</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CDAudioManager/willPlayBackgroundMusic</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>@property (readonly) BOOL willPlayBackgroundMusic</Declaration>
			
			
			<Anchor>//api/name/willPlayBackgroundMusic</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CDAudioManager/sharedManager</TokenIdentifier>
			<Abstract>Returns the shared singleton</Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>+ (CDAudioManager *)sharedManager</Declaration>
			
			
			<Anchor>//api/name/sharedManager</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CDAudioManager/sharedManagerState</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>+ (tAudioManagerState)sharedManagerState</Declaration>
			
			
			<Anchor>//api/name/sharedManagerState</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CDAudioManager/configure:</TokenIdentifier>
			<Abstract>Configures the shared singleton with a mode</Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>+ (void)configure:(tAudioManagerMode)mode</Declaration>
			
			
			<Anchor>//api/name/configure:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CDAudioManager/initAsynchronously:</TokenIdentifier>
			<Abstract>Initializes the engine asynchronously with a mode</Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>+ (void)initAsynchronously:(tAudioManagerMode)mode</Declaration>
			
			
			<Anchor>//api/name/initAsynchronously:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/init:</TokenIdentifier>
			<Abstract>Initializes the engine synchronously with a mode, channel definition and a total number of channels</Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>- (id)init:(tAudioManagerMode)mode</Declaration>
			
			
			<Anchor>//api/name/init:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/audioSessionInterrupted</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>- (void)audioSessionInterrupted</Declaration>
			
			
			<Anchor>//api/name/audioSessionInterrupted</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/audioSessionResumed</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>- (void)audioSessionResumed</Declaration>
			
			
			<Anchor>//api/name/audioSessionResumed</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/setResignBehavior:autoHandle:</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>- (void)setResignBehavior:(tAudioManagerResignBehavior)resignBehavior autoHandle:(BOOL)autoHandle</Declaration>
			
			
			<Anchor>//api/name/setResignBehavior:autoHandle:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/isDeviceMuted</TokenIdentifier>
			<Abstract>Returns true is audio is muted at a hardware level e.g user has ringer switch set to off</Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isDeviceMuted</Declaration>
			
			
			<Anchor>//api/name/isDeviceMuted</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/isOtherAudioPlaying</TokenIdentifier>
			<Abstract>Returns true if another app is playing audio such as the iPod music player</Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isOtherAudioPlaying</Declaration>
			
			
			<Anchor>//api/name/isOtherAudioPlaying</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/setMode:</TokenIdentifier>
			<Abstract>Sets the way the audio manager interacts with the operating system such as whether it shares output with other apps or obeys the mute switch</Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>- (void)setMode:(tAudioManagerMode)mode</Declaration>
			
			
			<Anchor>//api/name/setMode:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CDAudioManager/end</TokenIdentifier>
			<Abstract>Shuts down the shared audio manager instance so that it can be reinitialised</Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>+ (void)end</Declaration>
			
			
			<Anchor>//api/name/end</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/applicationWillResignActive</TokenIdentifier>
			<Abstract>Call if you want to use built in resign behavior but need to do some additional audio processing on resign active.</Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>- (void)applicationWillResignActive</Declaration>
			
			
			<Anchor>//api/name/applicationWillResignActive</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/applicationDidBecomeActive</TokenIdentifier>
			<Abstract>Call if you want to use built in resign behavior but need to do some additional audio processing on become active.</Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>- (void)applicationDidBecomeActive</Declaration>
			
			
			<Anchor>//api/name/applicationDidBecomeActive</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/audioSourceLoad:channel:</TokenIdentifier>
			<Abstract>Loads the data from the specified file path to the channel's audio source</Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>- (CDLongAudioSource *)audioSourceLoad:(NSString *)filePath channel:(tAudioSourceChannel)channel</Declaration>
			
			
			<Anchor>//api/name/audioSourceLoad:channel:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/audioSourceForChannel:</TokenIdentifier>
			<Abstract>Retrieves the audio source for the specified channel</Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>- (CDLongAudioSource *)audioSourceForChannel:(tAudioSourceChannel)channel</Declaration>
			
			
			<Anchor>//api/name/audioSourceForChannel:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/playBackgroundMusic:loop:</TokenIdentifier>
			<Abstract>Plays music in background. The music can be looped or not
It is recommended to use .aac files as background music since they are decoded by the device (hardware).</Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>- (void)playBackgroundMusic:(NSString *)filePath loop:(BOOL)loop</Declaration>
			
			
			<Anchor>//api/name/playBackgroundMusic:loop:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/preloadBackgroundMusic:</TokenIdentifier>
			<Abstract>Preloads a background music</Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>- (void)preloadBackgroundMusic:(NSString *)filePath</Declaration>
			
			
			<Anchor>//api/name/preloadBackgroundMusic:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/stopBackgroundMusic</TokenIdentifier>
			<Abstract>Stops playing the background music</Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>- (void)stopBackgroundMusic</Declaration>
			
			
			<Anchor>//api/name/stopBackgroundMusic</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/pauseBackgroundMusic</TokenIdentifier>
			<Abstract>Pauses the background music</Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>- (void)pauseBackgroundMusic</Declaration>
			
			
			<Anchor>//api/name/pauseBackgroundMusic</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/rewindBackgroundMusic</TokenIdentifier>
			<Abstract>Rewinds the background music</Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>- (void)rewindBackgroundMusic</Declaration>
			
			
			<Anchor>//api/name/rewindBackgroundMusic</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/resumeBackgroundMusic</TokenIdentifier>
			<Abstract>Resumes playing the background music</Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>- (void)resumeBackgroundMusic</Declaration>
			
			
			<Anchor>//api/name/resumeBackgroundMusic</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/isBackgroundMusicPlaying</TokenIdentifier>
			<Abstract>Returns whether or not the background music is playing</Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isBackgroundMusicPlaying</Declaration>
			
			
			<Anchor>//api/name/isBackgroundMusicPlaying</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CDAudioManager/setBackgroundMusicCompletionListener:selector:</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>CDAudioManager.h</DeclaredIn>			
			
			<Declaration>- (void)setBackgroundMusicCompletionListener:(id)listener selector:(SEL)selector</Declaration>
			
			
			<Anchor>//api/name/setBackgroundMusicCompletionListener:selector:</Anchor>
		</Token>
		
	</File>
</Tokens>