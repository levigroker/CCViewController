<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CCTexture2D.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CCTexture2D</TokenIdentifier>
			<Abstract>CCTexture2D class.
This class allows to easily create OpenGL 2D textures from images, text or raw data.
The created CCTexture2D object will always have power-of-two dimensions.
Depending on how you create the CCTexture2D object, the actual image area of the texture might be smaller than the texture dimensions i.e. "contentSize" != (pixelsWide, pixelsHigh and (maxS, maxT != (1.0, 1.0).
Be aware that the content of the generated textures will be upside-down!</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>
			
			<NodeRef refid="172"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/initWithData:pixelFormat:pixelsWide:pixelsHigh:contentSize:</TokenIdentifier>
			<Abstract>Intializes with a texture2d with data</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>- (id)initWithData:(const void *)data pixelFormat:(CCTexture2DPixelFormat)pixelFormat pixelsWide:(NSUInteger)width pixelsHigh:(NSUInteger)height contentSize:(CGSize)size</Declaration>
			
			
			<Anchor>//api/name/initWithData:pixelFormat:pixelsWide:pixelsHigh:contentSize:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/releaseData:</TokenIdentifier>
			<Abstract>These functions are needed to create mutable textures</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>- (void)releaseData:(void *)data</Declaration>
			
			
			<Anchor>//api/name/releaseData:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/keepData:length:</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>- (void *)keepData:(void *)data length:(NSUInteger)length</Declaration>
			
			
			<Anchor>//api/name/keepData:length:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/setPixelFormat:</TokenIdentifier>
			<Abstract>pixel format of the texture</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) CCTexture2DPixelFormat pixelFormat</Declaration>
			
			
			<Anchor>//api/name/pixelFormat</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTexture2D/pixelFormat</TokenIdentifier>
			<Abstract>pixel format of the texture</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) CCTexture2DPixelFormat pixelFormat</Declaration>
			
			
			<Anchor>//api/name/pixelFormat</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/setPixelsWide:</TokenIdentifier>
			<Abstract>width in pixels</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSUInteger pixelsWide</Declaration>
			
			
			<Anchor>//api/name/pixelsWide</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTexture2D/pixelsWide</TokenIdentifier>
			<Abstract>width in pixels</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSUInteger pixelsWide</Declaration>
			
			
			<Anchor>//api/name/pixelsWide</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/setPixelsHigh:</TokenIdentifier>
			<Abstract>hight in pixels</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSUInteger pixelsHigh</Declaration>
			
			
			<Anchor>//api/name/pixelsHigh</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTexture2D/pixelsHigh</TokenIdentifier>
			<Abstract>hight in pixels</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSUInteger pixelsHigh</Declaration>
			
			
			<Anchor>//api/name/pixelsHigh</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/setName:</TokenIdentifier>
			<Abstract>texture name</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) GLuint name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTexture2D/name</TokenIdentifier>
			<Abstract>texture name</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) GLuint name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/setContentSizeInPixels:</TokenIdentifier>
			<Abstract>returns content size of the texture in pixels</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, nonatomic) CGSize contentSizeInPixels</Declaration>
			
			
			<Anchor>//api/name/contentSizeInPixels</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTexture2D/contentSizeInPixels</TokenIdentifier>
			<Abstract>returns content size of the texture in pixels</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, nonatomic) CGSize contentSizeInPixels</Declaration>
			
			
			<Anchor>//api/name/contentSizeInPixels</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/setMaxS:</TokenIdentifier>
			<Abstract>texture max S</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) GLfloat maxS</Declaration>
			
			
			<Anchor>//api/name/maxS</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTexture2D/maxS</TokenIdentifier>
			<Abstract>texture max S</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) GLfloat maxS</Declaration>
			
			
			<Anchor>//api/name/maxS</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/setMaxT:</TokenIdentifier>
			<Abstract>texture max T</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) GLfloat maxT</Declaration>
			
			
			<Anchor>//api/name/maxT</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTexture2D/maxT</TokenIdentifier>
			<Abstract>texture max T</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) GLfloat maxT</Declaration>
			
			
			<Anchor>//api/name/maxT</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/setHasPremultipliedAlpha:</TokenIdentifier>
			<Abstract>whether or not the texture has their Alpha premultiplied</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) BOOL hasPremultipliedAlpha</Declaration>
			
			
			<Anchor>//api/name/hasPremultipliedAlpha</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTexture2D/hasPremultipliedAlpha</TokenIdentifier>
			<Abstract>whether or not the texture has their Alpha premultiplied</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) BOOL hasPremultipliedAlpha</Declaration>
			
			
			<Anchor>//api/name/hasPremultipliedAlpha</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/setShaderProgram:</TokenIdentifier>
			<Abstract>shader program used by drawAtPoint and drawInRect</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) CCGLProgram *shaderProgram</Declaration>
			
			
			<Anchor>//api/name/shaderProgram</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTexture2D/shaderProgram</TokenIdentifier>
			<Abstract>shader program used by drawAtPoint and drawInRect</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) CCGLProgram *shaderProgram</Declaration>
			
			
			<Anchor>//api/name/shaderProgram</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/setResolutionType:</TokenIdentifier>
			<Abstract>Returns the resolution type of the texture.
Is it a RetinaDisplay texture, an iPad texture or an standard texture ?
Only valid on iOS. Not valid on OS X.</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) ccResolutionType resolutionType</Declaration>
			
			
			<Anchor>//api/name/resolutionType</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTexture2D/resolutionType</TokenIdentifier>
			<Abstract>Returns the resolution type of the texture.
Is it a RetinaDisplay texture, an iPad texture or an standard texture ?
Only valid on iOS. Not valid on OS X.</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) ccResolutionType resolutionType</Declaration>
			
			
			<Anchor>//api/name/resolutionType</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/contentSize</TokenIdentifier>
			<Abstract>returns the content size of the texture in points</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>- (CGSize)contentSize</Declaration>
			
			
			<Anchor>//api/name/contentSize</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/drawAtPoint:</TokenIdentifier>
			<Abstract>draws a texture at a given point</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>- (void)drawAtPoint:(CGPoint)point</Declaration>
			
			
			<Anchor>//api/name/drawAtPoint:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/drawInRect:</TokenIdentifier>
			<Abstract>draws a texture inside a rect</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>- (void)drawInRect:(CGRect)rect</Declaration>
			
			
			<Anchor>//api/name/drawInRect:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/initWithString:dimensions:alignment:lineBreakMode:fontName:fontSize:</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>ccDeprecated.h</DeclaredIn>			
			
			<Declaration>- (id)initWithString:(NSString *)string dimensions:(CGSize)dimensions alignment:(CCTextAlignment)alignment lineBreakMode:(CCLineBreakMode)lineBreakMode fontName:(NSString *)name fontSize:(CGFloat)size</Declaration>
			
			
			<Anchor>//api/name/initWithString:dimensions:alignment:lineBreakMode:fontName:fontSize:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/initWithString:dimensions:alignment:fontName:fontSize:</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>ccDeprecated.h</DeclaredIn>			
			
			<Declaration>- (id)initWithString:(NSString *)string dimensions:(CGSize)dimensions alignment:(CCTextAlignment)alignment fontName:(NSString *)name fontSize:(CGFloat)size</Declaration>
			
			
			<Anchor>//api/name/initWithString:dimensions:alignment:fontName:fontSize:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/initWithString:dimensions:hAlignment:vAlignment:lineBreakMode:fontName:fontSize:</TokenIdentifier>
			<Abstract>Initializes a texture from a string with dimensions, alignment, line break mode, font name and font size
Supported lineBreakModes:
	- iOS: all UILineBreakMode supported modes
	- Mac: Only NSLineBreakByWordWrapping is supported.</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>- (id)initWithString:(NSString *)string dimensions:(CGSize)dimensions hAlignment:(CCTextAlignment)alignment vAlignment:(CCVerticalTextAlignment)vertAlignment lineBreakMode:(CCLineBreakMode)lineBreakMode fontName:(NSString *)name fontSize:(CGFloat)size</Declaration>
			
			
			<Anchor>//api/name/initWithString:dimensions:hAlignment:vAlignment:lineBreakMode:fontName:fontSize:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/initWithString:dimensions:hAlignment:vAlignment:fontName:fontSize:</TokenIdentifier>
			<Abstract>Initializes a texture from a string with dimensions, alignment, font name and font size</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>- (id)initWithString:(NSString *)string dimensions:(CGSize)dimensions hAlignment:(CCTextAlignment)alignment vAlignment:(CCVerticalTextAlignment)vertAlignment fontName:(NSString *)name fontSize:(CGFloat)size</Declaration>
			
			
			<Anchor>//api/name/initWithString:dimensions:hAlignment:vAlignment:fontName:fontSize:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/initWithString:fontName:fontSize:</TokenIdentifier>
			<Abstract>Initializes a texture from a string with font name and font size</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>- (id)initWithString:(NSString *)string fontName:(NSString *)name fontSize:(CGFloat)size</Declaration>
			
			
			<Anchor>//api/name/initWithString:fontName:fontSize:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/initWithCGImage:resolutionType:</TokenIdentifier>
			<Abstract>Initializes a texture from a CGImage object</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>- (id)initWithCGImage:(CGImageRef)cgImage resolutionType:(ccResolutionType)resolution</Declaration>
			
			
			<Anchor>//api/name/initWithCGImage:resolutionType:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/initWithCGImage:</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>- (id)initWithCGImage:(CGImageRef)cgImage</Declaration>
			
			
			<Anchor>//api/name/initWithCGImage:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCTexture2D/setDefaultAlphaPixelFormat:</TokenIdentifier>
			<Abstract>sets the default pixel format for CGImages that contains alpha channel.
If the CGImage contains alpha channel, then the options are:
	- generate 32-bit textures: kCCTexture2DPixelFormat_RGBA8888 (default one)
	- generate 16-bit textures: kCCTexture2DPixelFormat_RGBA4444
	- generate 16-bit textures: kCCTexture2DPixelFormat_RGB5A1
	- generate 24-bit textures: kCCTexture2DPixelFormat_RGB888 (no alpha)
	- generate 16-bit textures: kCCTexture2DPixelFormat_RGB565 (no alpha)
	- generate 8-bit textures: kCCTexture2DPixelFormat_A8 (only use it if you use just 1 color)</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>+ (void)setDefaultAlphaPixelFormat:(CCTexture2DPixelFormat)format</Declaration>
			
			
			<Anchor>//api/name/setDefaultAlphaPixelFormat:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCTexture2D/defaultAlphaPixelFormat</TokenIdentifier>
			<Abstract>returns the alpha pixel format</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>+ (CCTexture2DPixelFormat)defaultAlphaPixelFormat</Declaration>
			
			
			<Anchor>//api/name/defaultAlphaPixelFormat</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/bitsPerPixelForFormat</TokenIdentifier>
			<Abstract>returns the bits-per-pixel of the in-memory OpenGL texture</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>- (NSUInteger)bitsPerPixelForFormat</Declaration>
			
			
			<Anchor>//api/name/bitsPerPixelForFormat</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/stringForFormat</TokenIdentifier>
			<Abstract>returns the pixel format in a NSString.</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>- (NSString *)stringForFormat</Declaration>
			
			
			<Anchor>//api/name/stringForFormat</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCTexture2D/bitsPerPixelForFormat:</TokenIdentifier>
			<Abstract>Helper functions that returns bits per pixels for a given format.</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>+ (NSUInteger)bitsPerPixelForFormat:(CCTexture2DPixelFormat)format</Declaration>
			
			
			<Anchor>//api/name/bitsPerPixelForFormat:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/initWithPVRFile:</TokenIdentifier>
			<Abstract>Initializes a texture from a PVR file.</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>- (id)initWithPVRFile:(NSString *)file</Declaration>
			
			
			<Anchor>//api/name/initWithPVRFile:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCTexture2D/PVRImagesHavePremultipliedAlpha:</TokenIdentifier>
			<Abstract>treats (or not) PVR files as if they have alpha premultiplied.
Since it is impossible to know at runtime if the PVR images have the alpha channel premultiplied, it is
possible load them as if they have (or not) the alpha channel premultiplied.</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>+ (void)PVRImagesHavePremultipliedAlpha:(BOOL)haveAlphaPremultiplied</Declaration>
			
			
			<Anchor>//api/name/PVRImagesHavePremultipliedAlpha:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/setTexParameters:</TokenIdentifier>
			<Abstract>sets the min filter, mag filter, wrap s and wrap t texture parameters.
If the texture size is NPOT (non power of 2), then in can only use GLCLAMPTOEDGE in GLTEXTUREWRAP{S,T}.</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>- (void)setTexParameters:(ccTexParams *)texParams</Declaration>
			
			
			<Anchor>//api/name/setTexParameters:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/setAntiAliasTexParameters</TokenIdentifier>
			<Abstract>sets antialias texture parameters:
  - GLTEXTUREMINFILTER = GLLINEAR
  - GLTEXTUREMAGFILTER = GLLINEAR</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>- (void)setAntiAliasTexParameters</Declaration>
			
			
			<Anchor>//api/name/setAntiAliasTexParameters</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/setAliasTexParameters</TokenIdentifier>
			<Abstract>sets alias texture parameters:
  - GLTEXTUREMINFILTER = GLNEAREST
  - GLTEXTUREMAGFILTER = GLNEAREST</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>- (void)setAliasTexParameters</Declaration>
			
			
			<Anchor>//api/name/setAliasTexParameters</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTexture2D/generateMipmap</TokenIdentifier>
			<Abstract>Generates mipmap images for the texture.
It only works if the texture size is POT (power of 2).</Abstract>
			<DeclaredIn>CCTexture2D.h</DeclaredIn>			
			
			<Declaration>- (void)generateMipmap</Declaration>
			
			
			<Anchor>//api/name/generateMipmap</Anchor>
		</Token>
		
	</File>
</Tokens>