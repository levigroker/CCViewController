<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CCGLProgram.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CCGLProgram</TokenIdentifier>
			<Abstract>CCGLProgram
Class that implements a glProgram</Abstract>
			<DeclaredIn>CCGLProgram.h</DeclaredIn>
			
			<NodeRef refid="77"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCGLProgram/initWithVertexShaderByteArray:fragmentShaderByteArray:</TokenIdentifier>
			<Abstract>Initializes the CCGLProgram with a vertex and fragment with bytes array</Abstract>
			<DeclaredIn>CCGLProgram.h</DeclaredIn>			
			
			<Declaration>- (id)initWithVertexShaderByteArray:(const GLchar *)vShaderByteArray fragmentShaderByteArray:(const GLchar *)fShaderByteArray</Declaration>
			
			
			<Anchor>//api/name/initWithVertexShaderByteArray:fragmentShaderByteArray:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCGLProgram/initWithVertexShaderFilename:fragmentShaderFilename:</TokenIdentifier>
			<Abstract>Initializes the CCGLProgram with a vertex and fragment with contents of filenames</Abstract>
			<DeclaredIn>CCGLProgram.h</DeclaredIn>			
			
			<Declaration>- (id)initWithVertexShaderFilename:(NSString *)vShaderFilename fragmentShaderFilename:(NSString *)fShaderFilename</Declaration>
			
			
			<Anchor>//api/name/initWithVertexShaderFilename:fragmentShaderFilename:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCGLProgram/addAttribute:index:</TokenIdentifier>
			<Abstract>  It will add a new attribute to the shader </Abstract>
			<DeclaredIn>CCGLProgram.h</DeclaredIn>			
			
			<Declaration>- (void)addAttribute:(NSString *)attributeName index:(GLuint)index</Declaration>
			
			
			<Anchor>//api/name/addAttribute:index:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCGLProgram/link</TokenIdentifier>
			<Abstract>links the glProgram</Abstract>
			<DeclaredIn>CCGLProgram.h</DeclaredIn>			
			
			<Declaration>- (BOOL)link</Declaration>
			
			
			<Anchor>//api/name/link</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCGLProgram/use</TokenIdentifier>
			<Abstract>it will call glUseProgram()</Abstract>
			<DeclaredIn>CCGLProgram.h</DeclaredIn>			
			
			<Declaration>- (void)use</Declaration>
			
			
			<Anchor>//api/name/use</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCGLProgram/updateUniforms</TokenIdentifier>
			<Abstract>It will create 3 uniforms:
	- kCCUniformPMatrix
	- kCCUniformMVMatrix
	- kCCUniformSampler</Abstract>
			<DeclaredIn>CCGLProgram.h</DeclaredIn>			
			
			<Declaration>- (void)updateUniforms</Declaration>
			
			
			<Anchor>//api/name/updateUniforms</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCGLProgram/setUniformLocation:withI1:</TokenIdentifier>
			<Abstract>calls glUniform1i only if the values are different than the previous call for this same shader program.</Abstract>
			<DeclaredIn>CCGLProgram.h</DeclaredIn>			
			
			<Declaration>- (void)setUniformLocation:(NSUInteger)location withI1:(GLint)i1</Declaration>
			
			
			<Anchor>//api/name/setUniformLocation:withI1:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCGLProgram/setUniformLocation:withF1:</TokenIdentifier>
			<Abstract>calls glUniform1f only if the values are different than the previous call for this same shader program.</Abstract>
			<DeclaredIn>CCGLProgram.h</DeclaredIn>			
			
			<Declaration>- (void)setUniformLocation:(NSUInteger)location withF1:(GLfloat)f1</Declaration>
			
			
			<Anchor>//api/name/setUniformLocation:withF1:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCGLProgram/setUniformLocation:withF1:f2:</TokenIdentifier>
			<Abstract>calls glUniform2f only if the values are different than the previous call for this same shader program.</Abstract>
			<DeclaredIn>CCGLProgram.h</DeclaredIn>			
			
			<Declaration>- (void)setUniformLocation:(NSUInteger)location withF1:(GLfloat)f1 f2:(GLfloat)f2</Declaration>
			
			
			<Anchor>//api/name/setUniformLocation:withF1:f2:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCGLProgram/setUniformLocation:withF1:f2:f3:</TokenIdentifier>
			<Abstract>calls glUniform3f only if the values are different than the previous call for this same shader program.</Abstract>
			<DeclaredIn>CCGLProgram.h</DeclaredIn>			
			
			<Declaration>- (void)setUniformLocation:(NSUInteger)location withF1:(GLfloat)f1 f2:(GLfloat)f2 f3:(GLfloat)f3</Declaration>
			
			
			<Anchor>//api/name/setUniformLocation:withF1:f2:f3:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCGLProgram/setUniformLocation:withF1:f2:f3:f4:</TokenIdentifier>
			<Abstract>calls glUniform4f only if the values are different than the previous call for this same shader program.</Abstract>
			<DeclaredIn>CCGLProgram.h</DeclaredIn>			
			
			<Declaration>- (void)setUniformLocation:(NSUInteger)location withF1:(GLfloat)f1 f2:(GLfloat)f2 f3:(GLfloat)f3 f4:(GLfloat)f4</Declaration>
			
			
			<Anchor>//api/name/setUniformLocation:withF1:f2:f3:f4:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCGLProgram/setUniformLocation:with2fv:count:</TokenIdentifier>
			<Abstract>calls glUniform2fv only if the values are different than the previous call for this same shader program.</Abstract>
			<DeclaredIn>CCGLProgram.h</DeclaredIn>			
			
			<Declaration>- (void)setUniformLocation:(NSUInteger)location with2fv:(GLfloat *)floats count:(NSUInteger)numberOfArrays</Declaration>
			
			
			<Anchor>//api/name/setUniformLocation:with2fv:count:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCGLProgram/setUniformLocation:with3fv:count:</TokenIdentifier>
			<Abstract>calls glUniform3fv only if the values are different than the previous call for this same shader program.</Abstract>
			<DeclaredIn>CCGLProgram.h</DeclaredIn>			
			
			<Declaration>- (void)setUniformLocation:(NSUInteger)location with3fv:(GLfloat *)floats count:(NSUInteger)numberOfArrays</Declaration>
			
			
			<Anchor>//api/name/setUniformLocation:with3fv:count:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCGLProgram/setUniformLocation:with4fv:count:</TokenIdentifier>
			<Abstract>calls glUniform4fv only if the values are different than the previous call for this same shader program.</Abstract>
			<DeclaredIn>CCGLProgram.h</DeclaredIn>			
			
			<Declaration>- (void)setUniformLocation:(NSUInteger)location with4fv:(GLvoid *)floats count:(NSUInteger)numberOfArrays</Declaration>
			
			
			<Anchor>//api/name/setUniformLocation:with4fv:count:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCGLProgram/setUniformLocation:withMatrix4fv:count:</TokenIdentifier>
			<Abstract>calls glUniformMatrix4fv only if the values are different than the previous call for this same shader program.</Abstract>
			<DeclaredIn>CCGLProgram.h</DeclaredIn>			
			
			<Declaration>- (void)setUniformLocation:(NSUInteger)location withMatrix4fv:(GLvoid *)matrix_array count:(NSUInteger)numberOfMatrix</Declaration>
			
			
			<Anchor>//api/name/setUniformLocation:withMatrix4fv:count:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCGLProgram/setUniformForModelViewProjectionMatrix</TokenIdentifier>
			<Abstract>will update the MVP matrix on the MVP uniform if it is different than the previous call for this same shader program.</Abstract>
			<DeclaredIn>CCGLProgram.h</DeclaredIn>			
			
			<Declaration>- (void)setUniformForModelViewProjectionMatrix</Declaration>
			
			
			<Anchor>//api/name/setUniformForModelViewProjectionMatrix</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCGLProgram/vertexShaderLog</TokenIdentifier>
			<Abstract>returns the vertexShader error log</Abstract>
			<DeclaredIn>CCGLProgram.h</DeclaredIn>			
			
			<Declaration>- (NSString *)vertexShaderLog</Declaration>
			
			
			<Anchor>//api/name/vertexShaderLog</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCGLProgram/fragmentShaderLog</TokenIdentifier>
			<Abstract>returns the fragmentShader error log</Abstract>
			<DeclaredIn>CCGLProgram.h</DeclaredIn>			
			
			<Declaration>- (NSString *)fragmentShaderLog</Declaration>
			
			
			<Anchor>//api/name/fragmentShaderLog</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCGLProgram/programLog</TokenIdentifier>
			<Abstract>returns the program error log</Abstract>
			<DeclaredIn>CCGLProgram.h</DeclaredIn>			
			
			<Declaration>- (NSString *)programLog</Declaration>
			
			
			<Anchor>//api/name/programLog</Anchor>
		</Token>
		
	</File>
</Tokens>