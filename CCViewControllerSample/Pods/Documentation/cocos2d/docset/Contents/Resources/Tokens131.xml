<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CCProgressTimer.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CCProgressTimer</TokenIdentifier>
			<Abstract>CCProgresstimer is a subclass of CCNode.
It renders the inner sprite according to the percentage.
The progress can be Radial, Horizontal or vertical.</Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>
			
			<NodeRef refid="131"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCProgressTimer/setColor:</TokenIdentifier>
			<Abstract>returns the color</Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) ccColor3B color</Declaration>
			
			
			<Anchor>//api/name/color</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCProgressTimer/color</TokenIdentifier>
			<Abstract>returns the color</Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) ccColor3B color</Declaration>
			
			
			<Anchor>//api/name/color</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCProgressTimer/setOpacity:</TokenIdentifier>
			<Abstract>returns the opacity</Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) GLubyte opacity</Declaration>
			
			
			<Anchor>//api/name/opacity</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCProgressTimer/opacity</TokenIdentifier>
			<Abstract>returns the opacity</Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) GLubyte opacity</Declaration>
			
			
			<Anchor>//api/name/opacity</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCProgressTimer/setType:</TokenIdentifier>
			<Abstract>	Change the percentage to change progress. </Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) CCProgressTimerType type</Declaration>
			
			
			<Anchor>//api/name/type</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCProgressTimer/type</TokenIdentifier>
			<Abstract>	Change the percentage to change progress. </Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) CCProgressTimerType type</Declaration>
			
			
			<Anchor>//api/name/type</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCProgressTimer/setReverseDirection:</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) BOOL reverseDirection</Declaration>
			
			
			<Anchor>//api/name/reverseDirection</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCProgressTimer/reverseDirection</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) BOOL reverseDirection</Declaration>
			
			
			<Anchor>//api/name/reverseDirection</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCProgressTimer/setVertexData:</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) ccV2F_C4B_T2F *vertexData</Declaration>
			
			
			<Anchor>//api/name/vertexData</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCProgressTimer/vertexData</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) ccV2F_C4B_T2F *vertexData</Declaration>
			
			
			<Anchor>//api/name/vertexData</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCProgressTimer/setVertexDataCount:</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) int vertexDataCount</Declaration>
			
			
			<Anchor>//api/name/vertexDataCount</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCProgressTimer/vertexDataCount</TokenIdentifier>
			<Abstract></Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) int vertexDataCount</Declaration>
			
			
			<Anchor>//api/name/vertexDataCount</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCProgressTimer/setMidpoint:</TokenIdentifier>
			<Abstract>	Midpoint is used to modify the progress start position.
	If you're using radials type then the midpoint changes the center point
	If you're using bar type the the midpoint changes the bar growth
		it expands from the center but clamps to the sprites edge so:
		you want a left to right then set the midpoint all the way to ccp(0,y)
		you want a right to left then set the midpoint all the way to ccp(1,y)
		you want a bottom to top then set the midpoint all the way to ccp(x,0)
		you want a top to bottom then set the midpoint all the way to ccp(x,1)</Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) CGPoint midpoint</Declaration>
			
			
			<Anchor>//api/name/midpoint</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCProgressTimer/midpoint</TokenIdentifier>
			<Abstract>	Midpoint is used to modify the progress start position.
	If you're using radials type then the midpoint changes the center point
	If you're using bar type the the midpoint changes the bar growth
		it expands from the center but clamps to the sprites edge so:
		you want a left to right then set the midpoint all the way to ccp(0,y)
		you want a right to left then set the midpoint all the way to ccp(1,y)
		you want a bottom to top then set the midpoint all the way to ccp(x,0)
		you want a top to bottom then set the midpoint all the way to ccp(x,1)</Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) CGPoint midpoint</Declaration>
			
			
			<Anchor>//api/name/midpoint</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCProgressTimer/setBarChangeRate:</TokenIdentifier>
			<Abstract>	This allows the bar type to move the component at a specific rate
	Set the component to 0 to make sure it stays at 100%.
	For example you want a left to right bar but not have the height stay 100%
	Set the rate to be ccp(0,1); and set the midpoint to = ccp(0,.5f);</Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) CGPoint barChangeRate</Declaration>
			
			
			<Anchor>//api/name/barChangeRate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCProgressTimer/barChangeRate</TokenIdentifier>
			<Abstract>	This allows the bar type to move the component at a specific rate
	Set the component to 0 to make sure it stays at 100%.
	For example you want a left to right bar but not have the height stay 100%
	Set the rate to be ccp(0,1); and set the midpoint to = ccp(0,.5f);</Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) CGPoint barChangeRate</Declaration>
			
			
			<Anchor>//api/name/barChangeRate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCProgressTimer/setPercentage:</TokenIdentifier>
			<Abstract>Percentages are from 0 to 100</Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) float percentage</Declaration>
			
			
			<Anchor>//api/name/percentage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCProgressTimer/percentage</TokenIdentifier>
			<Abstract>Percentages are from 0 to 100</Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) float percentage</Declaration>
			
			
			<Anchor>//api/name/percentage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCProgressTimer/setSprite:</TokenIdentifier>
			<Abstract>The image to show the progress percentage</Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) CCSprite *sprite</Declaration>
			
			
			<Anchor>//api/name/sprite</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCProgressTimer/sprite</TokenIdentifier>
			<Abstract>The image to show the progress percentage</Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) CCSprite *sprite</Declaration>
			
			
			<Anchor>//api/name/sprite</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCProgressTimer/progressWithSprite:</TokenIdentifier>
			<Abstract>Creates a progress timer with the sprite as the shape the timer goes through</Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>+ (id)progressWithSprite:(CCSprite *)sprite</Declaration>
			
			
			<Anchor>//api/name/progressWithSprite:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCProgressTimer/initWithSprite:</TokenIdentifier>
			<Abstract>Initializes a progress timer with the sprite as the shape the timer goes through</Abstract>
			<DeclaredIn>CCProgressTimer.h</DeclaredIn>			
			
			<Declaration>- (id)initWithSprite:(CCSprite *)sprite</Declaration>
			
			
			<Anchor>//api/name/initWithSprite:</Anchor>
		</Token>
		
	</File>
</Tokens>