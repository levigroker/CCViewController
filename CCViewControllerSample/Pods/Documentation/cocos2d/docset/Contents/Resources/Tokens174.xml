<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CCTextureCache.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CCTextureCache</TokenIdentifier>
			<Abstract>Singleton that handles the loading of textures
Once the texture is loaded, the next time it will return
a reference of the previously loaded texture reducing GPU &amp; CPU memory</Abstract>
			<DeclaredIn>CCTextureCache.h</DeclaredIn>
			
			<NodeRef refid="174"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCTextureCache/sharedTextureCache</TokenIdentifier>
			<Abstract>Retruns ths shared instance of the cache</Abstract>
			<DeclaredIn>CCTextureCache.h</DeclaredIn>			
			
			<Declaration>+ (CCTextureCache *)sharedTextureCache</Declaration>
			
			
			<Anchor>//api/name/sharedTextureCache</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCTextureCache/purgeSharedTextureCache</TokenIdentifier>
			<Abstract>purges the cache. It releases the retained instance.</Abstract>
			<DeclaredIn>CCTextureCache.h</DeclaredIn>			
			
			<Declaration>+ (void)purgeSharedTextureCache</Declaration>
			
			
			<Anchor>//api/name/purgeSharedTextureCache</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTextureCache/addImage:</TokenIdentifier>
			<Abstract>Returns a Texture2D object given an file image
If the file image was not previously loaded, it will create a new CCTexture2D
object and it will return it. It will use the filename as a key.
Otherwise it will return a reference of a previosly loaded image.
Supported image extensions: .png, .bmp, .tiff, .jpeg, .pvr, .gif</Abstract>
			<DeclaredIn>CCTextureCache.h</DeclaredIn>			
			
			<Declaration>- (CCTexture2D *)addImage:(NSString *)fileimage</Declaration>
			
			
			<Anchor>//api/name/addImage:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTextureCache/addImageAsync:target:selector:</TokenIdentifier>
			<Abstract>Asynchronously, load a texture2d from a file.
If the file image was previously loaded, it will use it.
Otherwise it will load a texture in a new thread, and when the image is loaded, the callback will be called with the Texture2D as a parameter.
The callback will be called in the cocos2d thread, so it is safe to create any cocos2d object from the callback.
Supported image extensions: .png, .bmp, .tiff, .jpeg, .pvr, .gif</Abstract>
			<DeclaredIn>CCTextureCache.h</DeclaredIn>			
			
			<Declaration>- (void)addImageAsync:(NSString *)filename target:(id)target selector:(SEL)selector</Declaration>
			
			
			<Anchor>//api/name/addImageAsync:target:selector:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTextureCache/addImageAsync:withBlock:</TokenIdentifier>
			<Abstract>Asynchronously, load a texture2d from a file.
If the file image was previously loaded, it will use it.
Otherwise it will load a texture in a new thread, and when the image is loaded, the block will be called.
The callback will be called in the cocos2d thread, so it is safe to create any cocos2d object from the callback.
Supported image extensions: .png, .bmp, .tiff, .jpeg, .pvr, .gif</Abstract>
			<DeclaredIn>CCTextureCache.h</DeclaredIn>			
			
			<Declaration>- (void)addImageAsync:(NSString *)filename withBlock:(void ( ^ ) ( CCTexture2D *tex ))block</Declaration>
			
			
			<Anchor>//api/name/addImageAsync:withBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTextureCache/addCGImage:forKey:</TokenIdentifier>
			<Abstract>Returns a Texture2D object given an CGImageRef image
If the image was not previously loaded, it will create a new CCTexture2D object and it will return it.
Otherwise it will return a reference of a previously loaded image
The "key" parameter will be used as the "key" for the cache.
If "key" is nil, then a new texture will be created each time.</Abstract>
			<DeclaredIn>CCTextureCache.h</DeclaredIn>			
			
			<Declaration>- (CCTexture2D *)addCGImage:(CGImageRef)image forKey:(NSString *)key</Declaration>
			
			
			<Anchor>//api/name/addCGImage:forKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTextureCache/textureForKey:</TokenIdentifier>
			<Abstract>Returns an already created texture. Returns nil if the texture doesn't exist.</Abstract>
			<DeclaredIn>CCTextureCache.h</DeclaredIn>			
			
			<Declaration>- (CCTexture2D *)textureForKey:(NSString *)key</Declaration>
			
			
			<Anchor>//api/name/textureForKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTextureCache/removeAllTextures</TokenIdentifier>
			<Abstract>Purges the dictionary of loaded textures.
Call this method if you receive the "Memory Warning"
In the short term: it will free some resources preventing your app from being killed
In the medium term: it will allocate more resources
In the long term: it will be the same</Abstract>
			<DeclaredIn>CCTextureCache.h</DeclaredIn>			
			
			<Declaration>- (void)removeAllTextures</Declaration>
			
			
			<Anchor>//api/name/removeAllTextures</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTextureCache/removeUnusedTextures</TokenIdentifier>
			<Abstract>Removes unused textures
Textures that have a retain count of 1 will be deleted
It is convinient to call this method after when starting a new Scene</Abstract>
			<DeclaredIn>CCTextureCache.h</DeclaredIn>			
			
			<Declaration>- (void)removeUnusedTextures</Declaration>
			
			
			<Anchor>//api/name/removeUnusedTextures</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTextureCache/removeTexture:</TokenIdentifier>
			<Abstract>Deletes a texture from the cache given a texture</Abstract>
			<DeclaredIn>CCTextureCache.h</DeclaredIn>			
			
			<Declaration>- (void)removeTexture:(CCTexture2D *)tex</Declaration>
			
			
			<Anchor>//api/name/removeTexture:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTextureCache/removeTextureForKey:</TokenIdentifier>
			<Abstract>Deletes a texture from the cache given a its key name</Abstract>
			<DeclaredIn>CCTextureCache.h</DeclaredIn>			
			
			<Declaration>- (void)removeTextureForKey:(NSString *)textureKeyName</Declaration>
			
			
			<Anchor>//api/name/removeTextureForKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTextureCache/addPVRImage:</TokenIdentifier>
			<Abstract>Returns a Texture2D object given an PVR filename.
If the file image was not previously loaded, it will create a new CCTexture2D
object and it will return it. Otherwise it will return a reference of a previosly loaded image</Abstract>
			<DeclaredIn>CCTextureCache.h</DeclaredIn>			
			
			<Declaration>- (CCTexture2D *)addPVRImage:(NSString *)filename</Declaration>
			
			
			<Anchor>//api/name/addPVRImage:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTextureCache/dumpCachedTextureInfo</TokenIdentifier>
			<Abstract>Output to CCLOG the current contents of this CCTextureCache
This will attempt to calculate the size of each texture, and the total texture memory in use</Abstract>
			<DeclaredIn>CCTextureCache.h</DeclaredIn>			
			
			<Declaration>- (void)dumpCachedTextureInfo</Declaration>
			
			
			<Anchor>//api/name/dumpCachedTextureInfo</Anchor>
		</Token>
		
	</File>
</Tokens>